---
import Layout from "@layouts/Layout.astro";
import BackButton from "@components/BackButton.astro";
---

<Layout title="Admin Movies" backButton={false}>
  <div class="container mx-auto flex flex-row">
    <BackButton visible={true} text="Volver" />
  </div>
  <section class="flex justify-center items-center bg-slate-700">
    <div
      class="bg-slate-800 p-6 rounded-lg shadow-md w-auto max-w-md"
      x-data="adminForm()"
    >
      <h1 class="text-2xl font-bold mb-4 text-white text-center">
        Administración de Películas
      </h1>
      <form @submit.prevent="submitForm" class="space-y-4">
        <!-- Input para el año -->
        <div>
          <label
            for="year_start"
            class="block text-sm font-medium text-white mb-1">Del Año:</label
          >
          <input
            id="year_start"
            type="number"
            max="3000"
            x-model="year_start"
            placeholder="Introduce el año (ej. 2023)"
            class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm text-black"
            required
          />
        </div>
        <!-- Input para el año final (rango de años) -->
        <div>
          <label
            for="year_end"
            class="block text-sm font-medium text-white mb-1">Hasta:</label
          >
          <input
            id="year_end"
            type="number"
            max="3000"
            x-model="year_end"
            :placeholder="year_start"
            class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm text-black"
          />
        </div>
        <div>
          <label for="votes" class="block text-sm font-medium text-white mb-1"
            >Mínimo número de votos:</label
          >
          <input
            id="votes"
            type="number"
            x-model="votes"
            placeholder="1000"
            class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm text-black"
          />
        </div>
        <div>
          <label for="rating" class="block text-sm font-medium text-white mb-1"
            >Mínima puntuación:</label
          >
          <input
            id="rating"
            type="number"
            x-model="rating"
            placeholder="7"
            class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm text-black"
          />
        </div>
        <!-- Botón de envío -->
        <div class="pt-4">
          <button
            type="submit"
            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            :disabled="loading"
          >
            <span x-show="!loading">Actualizar Películas</span>
            <span x-show="loading">Actualizando...</span>
          </button>
        </div>
      </form>
      <!-- Mensajes de éxito o error -->
      <div x-show="message" class="mt-4">
        <p
          x-text="message"
          :class="{'text-green-600': !isError, 'text-red-600': isError}"
          class="text-center text-sm"
        >
        </p>
      </div>
    </div>
  </section>
</Layout>
<script is:inline>
  // @ts-ignore
  adminForm = function () {
    return {
      year_start: "",
      year_end: "",
      votes: "",
      rating: "",
      loading: false,
      message: "",
      isError: false,

      async submitForm() {
        this.loading = true;
        this.message = "";
        this.isError = false;

        try {
          const fromYear = this.year_start;
          const toYear =
            this.year_end.length > 0 ? this.year_end : this.year_start;
          for (let year = Number(fromYear); year <= toYear; year++) {
            const response = await fetch("/api/tmdb", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              credentials: "include",
              body: JSON.stringify({
                year,
                rating: this.rating?.length ? Number(this.rating) : undefined,
                votes: this.votes?.length ? Number(this.votes) : undefined,
              }),
            });

            if (!response.ok) throw new Error("Error actualizando películas.");
            const data = await response.json();
            this.message =
              data.message ||
              `Películas del año ${year} actualizadas con éxito.`;
          }

          this.year_start = ""; // Resetea el campo tras éxito
          this.year_end = ""; // Resetea el campo tras éxito
          this.votes = ""; // Resetea el campo tras éxito
          this.rating = ""; // Resetea el campo tras éxito
        } catch (error) {
          this.message = error.message || "Error al conectar con el servidor.";
          this.isError = true;
        } finally {
          this.loading = false;
        }
      },
    };
  };
</script>
