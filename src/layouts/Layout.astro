---
import "../styles/global.css";
import Footer from "@components/Footer.astro";
import Nav from "@components/Nav.astro";

export interface Props {
  title: string;
}

const { title } = Astro.props as Props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="view-transition" content="same-origin" />
    <title>{title}</title>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script>
      import "../scripts/spa-navigation.js";
    </script>
  </head>
  <body class="font-sans bg-slate-700 text-white">
    <div id="root" class="h-screen overflow-hidden flex flex-col">
      <Nav />
      <div id="container" class="h-full flex-1 overflow-y-auto">
        <div id="content">
          <slot />
        </div>
        <Footer />
      </div>
    </div>
  </body>
</html>

<script>
  document.addEventListener("alpine:init", () => {
    Alpine.store("globalState", {
      movies: [],
      showUnknownOnly: true,
      async init() {
        if (localStorage.getItem("user")) {
          const userIdToken = localStorage.getItem("id_token");
          const response = await fetch("/api/user/movies", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${userIdToken}`,
            },
          });

          if (response.ok) {
            const userMovies = await response.json();
            this.movies.push(...userMovies);
            this.syncToLocalStorage();
          }
        } else {
          this.movies.push(
            ...JSON.parse(localStorage.getItem("movies") || "[]")
          ); // Estado inicial
        }
      },
      setShowUnknownOnly(state) {
        this.showUnknownOnly = state;
      },
      isShowUnknownOnly() {
        return this.showUnknownOnly;
      },
      // Guarda el estado actual en localStorage
      syncToLocalStorage() {
        localStorage.setItem("movies", JSON.stringify(this.movies));
      },
      // Limpia el estado global
      clearMovies() {
        this.movies = [];
        this.syncToLocalStorage();
      },
      getMovie(movieId) {
        const movie = this.movies.find((m) => m.movie_id === movieId);
        if (movie) {
          return {
            ...movie,
            visible:
              ["UNKNOWN"].includes(movie.status) || !this.showUnknownOnly,
          };
        }
      },
      async updateMovieStatus(movieId, newStatus, year) {
        // Actualiza la pelicula en el estado de alpine
        if (this.movies.find((m) => m.movie_id === movieId)) {
          this.movies = this.movies.map((movie) =>
            movie.movie_id === movieId ? { ...movie, status: newStatus } : movie
          );
        } else {
          this.movies = [
            ...this.movies,
            { movie_id: movieId, status: newStatus, year },
          ];
        }
        // Guarda en localstorage
        this.syncToLocalStorage();
        // save user state (server)
        if (localStorage.getItem("user")) {
          const userIdToken = localStorage.getItem("id_token");
          const response = await fetch("/api/user/movies/" + movieId, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${userIdToken}`,
            },
            body: JSON.stringify({
              movieId,
              status: newStatus,
            }),
          });

          if (response.ok) {
            console.log("Estado actualizado correctamente");
            // Actualiza la UI segÃºn sea necesario
          }
        }
      },
      getYearMoviesStats(year, yearMoviesCount) {
        const yearMovies = this.movies.filter((m) => m.year === year) || [];
        return this.getMoviesStats(yearMovies, yearMoviesCount);
      },
      getAllMoviesStats(totalMoviesCount) {
        return this.getMoviesStats(this.movies || [], totalMoviesCount);
      },
      getMoviesStats(movies, totalMoviesCount) {
        const seenMoviesCount = movies.filter(
          (m) => m.status === "WATCHED"
        ).length;
        const discardMoviesCount = movies.filter(
          (m) => m.status === "DISCARD"
        ).length;
        const seenPercentage = Math.round(
          (seenMoviesCount / totalMoviesCount) * 100
        );
        const discardPercentage = Math.round(
          (discardMoviesCount / totalMoviesCount) * 100
        );
        return {
          seenMoviesCount,
          discardMoviesCount,
          unseenMoviesCount:
            totalMoviesCount - seenMoviesCount - discardMoviesCount,
          seenPercentage,
          discardPercentage,
          unseenPercentage: 100 - seenPercentage - discardPercentage,
        };
      },
    });
  });

  /*window.addEventListener("storage", (event) => {
    if (event.key === "movies") {
      const updatedData = JSON.parse(event.newValue || "[]");
      updateGlobalState(updatedData);
    }
  });*/
</script>
